<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Product
 *
 * @ORM\Table(name="product")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\ProductRepository")
 */
class Product
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, unique=true)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text")
     */
    private $description;

    /**
     * @var int
     *
     * @ORM\Column(name="price", type="integer")
     */
    private $price;

    /**
     * @var int
     *
     * @ORM\Column(name="immediatePrice", type="integer", nullable=true)
     * @Assert\GreaterThan(propertyPath="price")
     */
    private $immediatePrice;

    /**
     * @var int
     *
     * @ORM\Column(name="biddingPrice", type="integer", nullable=true)
     * @Assert\GreaterThan(propertyPath="price")
     */
    private $biddingPrice;

    /**
     * @var Category
     *
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Category", inversedBy="products")
     */
    private $category;

    /**
     * @var User
     *
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\User", inversedBy="products")
     */
    private $user;

    /**
     * @var User
     *
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\User", inversedBy="productsBought")
     * @ORM\JoinColumn(onDelete="SET NULL")
     */
    private $buyer;

    /**
     * @var \DateTime
     * @Assert\Range(
     *      min = "now"
     * )
     *
     * @ORM\Column(name="endDate", type="datetime", nullable=true)
     */
    private $endDate;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\ProductRating", mappedBy="product", cascade={"remove"})
     */
    private $productRatings;

    /**
     * @var float
     * @ORM\Column(name="average_rate", type="float", nullable=true)
     */
    private $averageRate;

    /**
     * @var integer
     * @ORM\Column(name="nb_rate", type="integer", nullable=true)
     */
    private $nbRate;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Bid", mappedBy="product", cascade={"remove"})
     */
    private $maxBiddings;

    private $oldBidding;

    /**
     * @var int
     *
     * @ORM\Column(name="nb_visit", type="integer")
     */
    private $nbVisit;

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Product
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Product
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set price
     *
     * @param integer $price
     *
     * @return Product
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set category
     *
     * @param \AppBundle\Entity\Category $category
     *
     * @return Product
     */
    public function setCategory(\AppBundle\Entity\Category $category = null)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return \AppBundle\Entity\Category
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set user
     *
     * @param \AppBundle\Entity\User $user
     *
     * @return Product
     */
    public function setUser(\AppBundle\Entity\User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \AppBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }


    /**
     * Set endDate
     *
     * @param \DateTime $endDate
     *
     * @return Product
     */
    public function setEndDate($endDate)
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Get endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }

    /**
     * Set immediatePrice
     *
     * @param integer $immediatePrice
     *
     * @return Product
     */
    public function setImmediatePrice($immediatePrice)
    {
        $this->immediatePrice = $immediatePrice;

        return $this;
    }

    /**
     * Get immediatePrice
     *
     * @return integer
     */
    public function getImmediatePrice()
    {
        return $this->immediatePrice;
    }

    /**
     * Set buyer
     *
     * @param \AppBundle\Entity\User $buyer
     *
     * @return Product
     */
    public function setBuyer(\AppBundle\Entity\User $buyer = null)
    {
        $this->buyer = $buyer;

        return $this;
    }

    /**
     * Get buyer
     *
     * @return \AppBundle\Entity\User
     */
    public function getBuyer()
    {
        return $this->buyer;
    }

    /**
     * Set biddingPrice
     *
     * @param integer $biddingPrice
     *
     * @return Product
     */
    public function setBiddingPrice($biddingPrice)
    {
        $this->oldBidding = $this->biddingPrice;
        $this->biddingPrice = $biddingPrice;

        return $this;
    }

    /**
     * Get biddingPrice
     *
     * @return integer
     */
    public function getBiddingPrice()
    {
        return $this->biddingPrice;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->productRatings = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Set averageRate
     *
     * @param float $averageRate
     *
     * @return Product
     */
    public function setAverageRate($averageRate)
    {
        $this->averageRate = $averageRate;

        return $this;
    }

    /**
     * Get averageRate
     *
     * @return float
     */
    public function getAverageRate()
    {
        return $this->averageRate;
    }

    /**
     * Add productRating
     *
     * @param \AppBundle\Entity\ProductRating $productRating
     *
     * @return Product
     */
    public function addProductRating(\AppBundle\Entity\ProductRating $productRating)
    {
        $this->productRatings[] = $productRating;

        return $this;
    }

    /**
     * Remove productRating
     *
     * @param \AppBundle\Entity\ProductRating $productRating
     */
    public function removeProductRating(\AppBundle\Entity\ProductRating $productRating)
    {
        $this->productRatings->removeElement($productRating);
    }

    /**
     * Get productRatings
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProductRatings()
    {
        return $this->productRatings;
    }

    public function __toString()
    {
        return $this->getName();
    }

    /**
     * Set nbRate
     *
     * @param integer $nbRate
     *
     * @return Product
     */
    public function setNbRate($nbRate)
    {
        $this->nbRate = $nbRate;

        return $this;
    }

    /**
     * Get nbRate
     *
     * @return integer
     */
    public function getNbRate()
    {
        return $this->nbRate;
    }

    /**
     * Add maxBidding
     *
     * @param \AppBundle\Entity\Bid $maxBidding
     *
     * @return Product
     */
    public function addMaxBidding(\AppBundle\Entity\Bid $maxBidding)
    {
        $this->maxBiddings[] = $maxBidding;

        return $this;
    }

    /**
     * Remove maxBidding
     *
     * @param \AppBundle\Entity\Bid $maxBidding
     */
    public function removeMaxBidding(\AppBundle\Entity\Bid $maxBidding)
    {
        $this->maxBiddings->removeElement($maxBidding);
    }

    /**
     * Get maxBiddings
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMaxBiddings()
    {
        return $this->maxBiddings;
    }

    /**
     * @return mixed
     */
    public function getOldBidding()
    {
        return $this->oldBidding;
    }

    /**
     * @param mixed $oldBidding
     * @return Product
     */
    public function setOldBidding($oldBidding)
    {
        $this->oldBidding = $oldBidding;
        return $this;
    }

    /**
     * Set nbVisit
     *
     * @param integer $nbVisit
     *
     * @return Product
     */
    public function setNbVisit($nbVisit)
    {
        $this->nbVisit = $nbVisit;

        return $this;
    }

    /**
     * Get nbVisit
     *
     * @return integer
     */
    public function getNbVisit()
    {
        return $this->nbVisit;
    }
}
